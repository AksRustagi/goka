// Code generated by go-bindata.
// sources:
// templates/common/base.go.html
// templates/common/head.go.html
// templates/common/menu.go.html
// templates/monitor/index.go.html
// templates/monitor/menu.go.html
// templates/monitor/processor.go.html
// templates/query/index.go.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommonBaseGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4a\x2c\x4e\x55\xaa\xad\xe5\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x51\x52\xd0\x03\xa9\x82\x48\xda\x24\xe5\xa7\x54\xa2\xaa\xc9\x4d\xcd\x2b\x85\xa8\x41\x16\x4d\xce\xcf\x2b\x49\xcd\x2b\x81\x6a\xd6\x87\x68\xb3\xd1\x87\x59\x91\x9a\x97\x52\x5b\xcb\x05\x08\x00\x00\xff\xff\xfd\x8f\xc0\x67\x8d\x00\x00\x00")

func templatesCommonBaseGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommonBaseGoHtml,
		"templates/common/base.go.html",
	)
}

func templatesCommonBaseGoHtml() (*asset, error) {
	bytes, err := templatesCommonBaseGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/common/base.go.html", size: 141, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommonHeadGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4b\x73\xe2\x38\x18\xbc\xe7\x57\xb8\x74\xe1\x90\xb5\x04\x98\x0d\x24\x85\xb3\x95\x25\xbb\x3c\xf2\x22\x90\x40\xd8\xcb\x96\x90\x3e\xdb\x72\x64\xc9\xb1\x64\xc0\xc3\xf0\xdf\xa7\x1c\x86\x84\xca\x64\x1e\x39\xcc\xcd\x5f\xbb\xd5\xee\x6e\x7f\xa5\xf5\x9a\x43\x20\x14\x38\x28\x02\xca\xd1\x66\x73\xd0\x2e\x1f\x4e\x0f\x1c\xc7\x71\xda\x09\x58\xea\xb0\x88\x66\x06\xac\x8f\x72\x1b\xb8\x2d\xb4\xff\x2a\xb2\x36\x75\xe1\x29\x17\x0b\x1f\xad\xdc\x9c\xba\x4c\x27\x29\xb5\x62\x2e\x01\x39\x4c\x2b\x0b\xca\xfa\x48\x80\x0f\x3c\x84\xdd\x49\x2b\xac\x84\xd3\xf5\x1a\xa7\x34\x84\xff\x9f\xa7\xcd\xa6\x4d\xb6\xf0\x9e\xb8\xa2\x09\xf8\x88\x83\x61\x99\x48\xad\xd0\x6a\x4f\x12\x7d\x4b\x5c\x08\x58\xa6\x3a\xb3\x7b\xac\xa5\xe0\x36\xf2\x39\x2c\x04\x03\xf7\x79\xf8\xc3\x11\x4a\x58\x41\xa5\x6b\x18\x95\xe0\xd7\x76\x42\x52\xa8\x47\x27\xca\x20\xf0\x2b\x65\x28\x73\x42\x48\xa0\x95\x35\x38\xd4\x3a\x94\x40\x53\x61\x30\xd3\x09\x61\xc6\xfc\x15\xd0\x44\xc8\xc2\xbf\x49\x41\x1d\x8e\xa9\x32\x87\x1d\xad\x38\x28\x03\xfc\xc4\xab\x56\x3f\xbf\xe0\x15\x27\x03\xe9\x57\x8c\x2d\x24\x98\x08\xc0\x56\x1c\x5b\xa4\xe0\x57\x2c\xac\x6c\xa9\x54\xd9\xff\x78\xc9\x45\xaf\x5c\xb4\x75\x83\x76\x6e\x12\xba\x62\x5c\xe1\xb9\xd6\xd6\xd8\x8c\xa6\xe5\x50\x1a\x7a\x01\x88\x87\x3d\xdc\x2c\x65\x5f\x31\x9c\x08\x85\x99\x31\xc8\x11\xca\x42\x98\x09\x5b\xf8\xc8\x44\xd4\x6b\x35\xdc\xbf\x27\x33\x21\xc6\xfd\x7f\xe1\xa2\xc6\xbb\xc9\x60\x74\xf6\x58\xb0\xbc\x77\xd6\x1b\x85\x5e\xfd\x26\xb9\x67\xcb\x65\x53\x2b\x6f\x34\xe3\x61\x63\x42\x0f\x87\xc9\xf8\xce\x7c\x22\x17\x47\xad\xc5\x9c\xff\x13\x47\x8d\x1c\x39\x2c\xd3\xc6\xe8\x4c\x84\x42\xf9\x88\x2a\xad\x8a\x44\xe7\x06\xfd\xee\x50\xae\x8d\x20\x81\x1f\x45\xcb\x7a\x85\xbe\xae\x89\x91\x99\x3c\x4c\x1a\xea\xbc\x3a\xc8\xad\x54\x5d\x6a\x64\x67\x90\x77\x9a\xf9\x32\xe6\xf9\xf4\x78\x3c\xc9\x2e\x17\xa3\x99\xd6\xc3\xb4\x3e\x9f\xce\xc2\x24\x1c\xdc\xf6\x1f\x96\x92\x8c\xd3\x9f\x45\xdb\x6e\xa4\x63\x32\xe6\x23\x42\x68\x4c\x57\x6f\xd7\xa4\xc4\x88\x14\x73\x43\xe2\xa7\x1c\xb2\x82\xd4\x70\xad\x86\xab\x5f\xa7\x67\xef\xb1\x41\xa7\x6d\xb2\x95\x7a\x47\xf7\xa3\x15\xc5\x6f\x7f\x7b\xfc\x6e\x35\x77\xec\xcf\xfe\xad\x98\x57\xeb\xcd\xa7\x45\x11\x8f\xaf\x82\x5e\x7c\x73\x45\x2f\x1f\x83\x7c\x3a\x59\xfd\xb7\xba\x1f\xaa\xce\xe0\xac\x29\xeb\x49\x67\x7a\xdd\x4f\xbb\xc7\x49\xb7\x73\xde\x5a\x76\xaf\xfb\x6c\x78\xde\xbc\x5b\xd1\xef\x57\xf3\x0b\x59\x18\x57\xb1\xc1\x4c\xea\x9c\x07\x92\x66\xf0\xa6\x2a\xa9\x39\x35\x11\x8e\x0d\x69\xe0\xda\x11\x6e\xec\x80\x0f\xb4\xc5\xbd\xd8\x60\x9d\x85\x84\x7b\x78\xd1\x78\xe7\x64\x9b\x6c\xaf\xb7\xf5\x1a\x14\xdf\x6c\x0e\xbe\x04\x00\x00\xff\xff\xee\x02\xd0\x16\x00\x05\x00\x00")

func templatesCommonHeadGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommonHeadGoHtml,
		"templates/common/head.go.html",
	)
}

func templatesCommonHeadGoHtml() (*asset, error) {
	bytes, err := templatesCommonHeadGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/common/head.go.html", size: 1280, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommonMenuGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x6e\x84\x30\x0c\x45\xf7\x9c\xc2\xca\x7e\xc8\x05\x32\x5c\x05\x19\x62\x44\x54\xd7\x8c\x42\x92\x8d\xe5\xbb\x57\xd3\x01\xda\x4e\x57\x89\xf5\x9f\xf2\x7e\xac\x1a\x69\x49\x42\xe0\x3e\x49\xaa\x33\xeb\x82\x60\x83\x99\x71\xdf\xef\x4e\xb0\x4d\x98\xe1\x75\xdc\x22\x2d\x58\xb9\xb8\xa1\x03\x08\x31\x5d\xd4\xbc\x49\xc1\x24\x94\x6f\x0b\xd7\x14\xbf\xf3\xbf\xc4\xf1\xc0\x4a\x18\x29\x1f\x39\x40\xc0\xb7\x7c\xca\x28\xd1\xc1\x9a\x69\xb9\x3b\xd5\x7e\xc2\x9d\xc6\x07\x96\xd5\xcc\xbb\x41\xb5\x7f\x76\x1c\x4b\x2a\x4c\x66\xc1\xe3\x21\xf2\x31\xb5\xff\xce\x79\x63\xc6\xc7\x4e\x67\xfb\x73\xfe\xd1\x57\xfe\xe5\x3f\x31\xc1\x76\x11\xaa\x13\x6f\xf3\xc7\x6b\x37\xe3\xf3\x9b\x24\xc5\x41\x6f\x76\x01\x24\xf1\x9a\x82\xaf\xfc\x56\xe9\xb8\x04\x2f\xd8\x86\x4e\x15\x48\x22\x98\x75\x5f\x01\x00\x00\xff\xff\x50\x2f\x43\xbe\x77\x01\x00\x00")

func templatesCommonMenuGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommonMenuGoHtml,
		"templates/common/menu.go.html",
	)
}

func templatesCommonMenuGoHtml() (*asset, error) {
	bytes, err := templatesCommonMenuGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/common/menu.go.html", size: 375, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMonitorIndexGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6e\xc2\x30\x10\x85\xf7\x9c\x62\x64\xb1\x6c\xb0\x8a\x58\x55\xc1\x9b\xb2\x61\xd7\x1b\x54\x86\x19\xb0\x25\xd7\x46\xb6\x4b\x7f\x2c\xdf\xbd\x0a\x24\x0e\x49\x50\xd9\x24\x99\x79\xdf\xc4\xef\x79\x52\x42\x3a\x68\x4b\xc0\xf6\xce\x46\xb2\x91\xe5\x3c\xab\x51\x9f\x61\x6f\x64\x08\x6b\xe6\xdd\x17\x13\x33\x80\xdb\x5e\x83\x4a\x6d\xc9\x5f\x94\xb1\x66\xaa\x0f\xac\x9e\x97\xad\x06\x50\xab\xa5\x78\xf3\x6e\x4f\x21\x38\x1f\x6a\xae\x96\x9d\x92\xd2\x7c\x27\x03\xbd\x9f\x64\x54\xf0\xb2\x86\x45\xa9\x72\x2e\x88\x97\xf6\x48\x30\xd7\x16\xe9\xfb\x09\xe6\xa7\xee\x4f\x97\x81\x52\x85\x32\xf1\xc8\xce\x98\x38\x49\x4b\x06\x2e\xcf\x0a\xe9\x20\x3f\x4d\x1c\xb0\x77\xe8\x4a\x91\x44\x6d\x8f\x23\xae\x89\xba\x1a\x82\x51\x47\x43\x4c\xd4\x12\x94\xa7\xc3\x9a\xdd\x26\xce\x99\x17\xfb\x3c\xa5\x6b\xc2\x9c\x59\x7f\x59\xd0\x77\x6b\x2e\x27\x87\x71\xb5\x12\xb3\xa1\x53\x8e\xfa\xfc\xc8\xfc\xce\xe1\xcf\xd4\x39\x9a\x8e\x42\x53\x29\xe7\xf5\x6f\xb3\x64\x33\x01\x1b\x34\x8a\x57\xa3\xc9\x46\xd8\x6e\x6a\x8e\xf1\x1e\x82\x22\xa5\x7e\x57\x8b\x2b\xbf\xdd\x34\x41\x10\xa7\x49\xd0\x88\xff\x83\x8c\x1a\x83\x32\x25\xb2\xd8\xee\xbf\x08\xed\x47\xfb\xea\x90\xbf\x00\x00\x00\xff\xff\x68\xfb\xe0\xd6\xef\x02\x00\x00")

func templatesMonitorIndexGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMonitorIndexGoHtml,
		"templates/monitor/index.go.html",
	)
}

func templatesMonitorIndexGoHtml() (*asset, error) {
	bytes, err := templatesMonitorIndexGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/monitor/index.go.html", size: 751, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMonitorMenuGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\x41\xaa\xc3\x30\x0c\x04\xd0\x7d\x4e\x21\x44\x96\x3f\xdf\xfb\xe2\x78\xd3\x83\x04\xc5\x56\x5a\x83\xa3\x80\x9d\x94\x82\xd0\xdd\x0b\x4d\x4b\x57\x03\x0f\x66\x18\xd5\xc4\x4b\x16\x06\x5c\x59\x8e\x29\x6e\xb2\xb3\xec\x68\xd6\xa9\x56\x92\x1b\x43\x9f\x25\xf1\xf3\x0f\xfa\x09\x2e\x23\xfc\xc7\x4d\xda\xb1\x72\x6d\x66\x1d\x80\x2f\x39\x78\x82\x58\xa8\xb5\x11\x85\x1e\x33\xd5\x61\xae\x24\x09\xe1\x5e\x79\x19\xd1\x7d\x0b\x4e\xf5\x9c\x32\xc3\x70\xfd\xe0\xf0\x43\xef\x28\x78\x57\x72\xe8\x54\x59\xd2\xfb\xc1\x99\xaf\x00\x00\x00\xff\xff\xf2\xc3\x81\x2e\xa4\x00\x00\x00")

func templatesMonitorMenuGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMonitorMenuGoHtml,
		"templates/monitor/menu.go.html",
	)
}

func templatesMonitorMenuGoHtml() (*asset, error) {
	bytes, err := templatesMonitorMenuGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/monitor/menu.go.html", size: 164, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMonitorProcessorGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x60\x55\xe4\x2c\x9d\x6d\x49\xde\xa4\xf7\xb0\x6b\xef\xa1\x7f\xd1\x00\xbd\x5c\x90\x4b\xaf\x0f\x8b\xc0\xe0\x8a\x63\x9b\x39\x8a\x14\x48\xda\xde\x85\xa1\xef\x5e\x90\xfa\x63\x4a\xa6\xd6\x4e\x7b\x49\x1e\x1c\x89\xf3\xe3\x6f\x86\x33\xc3\xa1\x86\x7b\x3c\x12\x58\x53\x0e\x28\xc8\x04\xd7\xc0\x75\x50\x96\xa3\x05\xa1\x7b\x94\x31\xac\xd4\x32\x90\xe2\x10\xdc\x8f\x10\x72\xc7\x0c\x14\x53\x0e\x72\xb6\x66\x3b\x4a\xac\xbc\x8f\x60\xb3\x9c\xcc\xe6\x37\x1e\x59\x81\x39\x30\x64\x7f\x67\x04\xd6\x78\xc7\x74\x8d\x1a\xc6\x6d\x01\x13\xca\x37\x2d\x0e\xa1\xc5\x76\x7e\x7f\x3c\xc6\x85\x14\x19\x28\x25\xe4\x3b\x9c\x43\x59\x2e\x92\xed\xbc\xe5\x4a\x08\xdd\x0f\x12\xcf\x1e\x05\x79\x76\xf9\x34\x7e\x64\xd0\x40\xaa\x17\xfb\x3b\x53\x5a\xd2\x02\x88\x83\x35\x68\x63\x91\x3b\x62\xc6\x64\x77\xc0\xc2\xee\x3f\x1a\x92\x45\xa2\xb7\x3e\xe1\x7b\x2c\x35\xd5\x54\xf0\x21\xc0\x2f\x1a\xeb\x9d\x1a\x92\x7e\xc0\x1a\x50\x98\xab\x4d\xa2\xa2\x17\x18\xa4\x1e\x12\xfe\x75\x27\x25\xf0\x41\xf1\x3f\xff\xf3\xd3\x90\xe8\xef\x1f\x3f\xa0\xf0\x05\xad\x1c\x17\x1f\xb0\xa6\x02\x85\xbb\x82\x60\x0d\x2a\x01\xae\xe5\xf3\xe0\x84\xf7\x52\x6c\x24\x28\xcf\x52\x17\x49\xd7\xb1\x06\xd1\x73\xfe\x42\x9b\x68\x22\x4a\x4c\x70\x6b\x8f\xfe\x4a\xe1\x10\xf4\xe6\x19\x94\x13\xf2\xc4\x06\xb8\x97\x2f\x55\xbe\xaa\x4c\xd2\x42\x23\xfd\x5c\xc0\x32\xd0\xf0\xa4\x93\xcf\x78\x8f\xab\xd1\x96\x75\x8f\x25\x92\xc0\x09\xc8\x36\x8e\x0a\x2d\xd1\x7a\xc7\x33\xf3\x1c\xb6\xb6\xa8\xe8\x38\x6a\xd5\x9a\x59\x46\xf2\x2f\xaa\x34\x5a\xa2\x55\xbc\x66\x58\x6b\xe0\xe1\x2a\xce\x71\xe1\x4c\x9a\x9e\x98\xf6\x98\xed\x60\x8a\x28\x27\xf0\x14\x1d\x9d\x45\xd1\x75\xf8\x07\x3b\x1a\x53\x9e\xb1\x1d\x01\x15\x06\x1b\xf1\x1b\x0e\xa2\x0e\x0c\x21\x09\x7a\x27\x39\x7a\xf8\x74\xe7\x0c\x97\xce\xb3\x55\xf1\x30\xce\x41\x4b\x9a\x71\x9c\xc3\xf8\x13\x5a\x56\x1a\x63\x55\x30\xaa\xc3\x20\x0e\xa2\x58\x31\x9a\x41\x78\x13\xc5\x9f\x05\xe5\x76\xe8\x6e\x34\x3a\x57\x63\xd9\x1c\x5d\x65\x34\x45\x5a\xee\xc0\x45\x27\x09\xca\x04\x57\x82\x41\xcc\xc4\x26\xb4\xa1\x43\x8c\x2a\x6d\x38\x4f\x20\x17\xd3\xf8\xcd\xa5\x69\xfc\xf9\x51\x02\x58\x7f\x1a\x2f\xae\xe2\x8d\x14\xbb\xe2\x2f\xcf\xed\x94\x69\x37\x2e\x1d\xf7\xd4\x56\x9b\xf1\xf8\xe4\x80\x58\xed\x1e\xcd\xe6\xe7\x9b\x30\x9d\x9e\x09\x19\x56\xfa\xad\xf1\xce\xcf\x6b\xeb\x86\xa8\xbb\xd8\xcb\xa1\x33\x76\x57\x7c\xaa\x31\xfb\x57\x83\x55\x8e\xf1\xf5\xe4\x13\x59\x2f\xaa\xad\xe9\x7b\xbf\xdd\xfb\x21\x8b\xc7\xf1\x38\x9a\xcc\xa3\xbb\x0e\x5b\xc7\xee\x6a\xe2\x90\xbe\x4a\xfa\x90\x7e\xea\x33\xb8\xef\xf5\xea\x1e\xc6\xdd\x74\xf2\x42\xac\xc4\xc5\x9c\x87\xa7\xc6\xba\x7e\xbe\x94\x4d\x5a\x02\x74\xb3\x09\xf5\xd3\xc9\xa4\x4d\x3f\x9d\xaa\x92\xd5\x6e\xea\xf7\xf6\x24\xf2\x6d\x6c\xc7\x3d\x66\x5e\x75\x6c\x2c\x51\x2b\x8f\xab\x78\xf4\xb7\x4f\x3a\x9d\x37\x1b\xc8\xb5\xae\xc9\xe4\x2b\x18\xe6\xd3\x1b\x97\xa1\x43\x61\xaa\x23\x5a\xa2\x60\xa1\xc9\x7d\x30\xb1\x36\x4d\x82\x45\xa2\xc9\x7d\x35\x62\xb8\xeb\x81\x60\xd4\x4b\x48\x5b\x47\x9d\x95\xf6\xe2\xaf\x0e\x54\x67\xdb\xd3\xfa\x63\x65\xcf\xa7\xd8\xe6\x69\x0f\x9b\x61\x05\x28\xbd\x35\x3e\x17\x05\x70\x7f\x1e\x8d\x8d\x49\x0b\x55\x60\xde\x1c\xbd\x0c\x3f\x02\x43\xf6\xf7\xf4\x79\xf0\x73\x01\x7c\x91\x18\xd8\xbd\xb5\x7b\x7c\x77\xae\x6a\x6e\x55\x49\xc8\xc4\x1e\x4c\xf2\x8f\x7a\x1a\xcd\xf2\xd6\x52\xe4\x1d\xef\xd6\xf0\x95\x32\xa7\xe4\x4a\xac\xd7\x0a\x34\xfa\xee\xbb\x0b\x88\x6a\xbd\xe8\x7e\x99\xa2\x1f\xaf\x83\xde\xa2\xf4\xce\x63\x8f\x34\x07\xf8\x12\x85\xe7\x1c\x56\xe2\x23\x37\x82\x87\xf1\x3c\x8f\xcd\xc3\xf8\x93\x61\x8e\x7c\xd4\x5a\x78\x17\xba\x3d\xe4\x5e\xda\xed\x21\x7f\xd9\xd4\xac\xfa\x54\xf0\x92\xd6\xb2\xc6\x7f\x3e\xfe\x2e\xc4\x55\xd5\xd3\x65\xb6\x28\x66\xd9\x8e\x19\x07\x14\xf5\x57\x81\xc7\x9e\x46\x64\xdc\x17\x36\xc6\xcd\x6c\x84\xa3\xef\xe7\x69\x8a\x12\x14\x6a\x31\xb3\xef\x51\xac\xc5\x3f\xe8\x13\x90\xf0\xe6\xcc\x57\x0e\x0f\x55\xef\xf0\xbb\xb0\x19\x88\x7e\x4c\x6f\x9b\x67\x9f\x43\x40\x4b\xab\x5b\x0b\x34\x6b\xbc\x13\xa1\xc4\xc6\xf4\xa4\xf0\x3c\x38\x6e\xe6\x7f\x68\xb3\xb5\x4a\x6b\x34\xe9\x81\xcd\x3f\x8b\x1c\x4f\x0c\xaf\xb3\x8e\xc9\xf8\xf2\x14\xb3\xf8\x6b\x70\xb5\xf5\xd7\x40\xb5\xb8\x06\x05\x5a\x36\xb0\x41\xd4\xec\x82\xbc\xf3\xc9\x5e\xc7\x21\x40\x4a\x3f\x33\x58\x06\x39\x96\x1b\xca\x67\x8f\x42\x6b\x91\xdf\xa6\xc5\xd3\x5d\xe0\xa7\x32\x64\x1e\xa2\xd9\x23\x96\x01\x92\xc2\x70\x35\x63\x76\xa8\xe1\xa7\x7c\x76\xa0\x44\x6f\x6f\xd1\x1b\xc8\xef\x50\xf5\x3c\x46\x93\x53\xbe\x4c\xd0\xf8\x95\xd1\xea\xf5\xc3\x29\xaf\x26\xe3\x57\xd5\x97\x65\xf3\x5b\x95\xaf\xf3\xfa\x75\xe3\xd6\x2f\xa4\x34\x66\x0c\xc8\xff\x55\x35\xeb\xec\x42\xbf\x54\x5c\x97\x0a\xe8\x6b\xd7\x80\x9e\xea\xaf\x56\xac\xbe\x6a\x69\xe9\x2b\x32\xc5\xcf\x55\xd2\x3e\xad\x98\xc0\xc4\x53\x1d\x7d\x80\xc1\xda\x55\xb5\x03\x6b\x90\xc0\x33\xe3\xa8\x9f\xb0\xde\xc6\x39\xe5\x4d\x75\x9a\xd6\x23\xf8\x29\xdc\x1e\xf2\x99\x71\xc9\xf7\x3f\xa4\x53\x94\x46\x3d\x9f\xd0\x75\x68\x2d\x5d\xa2\xf4\xec\xfb\xcb\x28\x61\x78\x83\x96\x68\x9e\xf6\x56\x58\x02\x53\x30\x8c\x0f\x5b\xed\x4e\xb9\x6c\xed\x8d\x8c\x1d\x4d\xdd\xb4\xe6\xb5\x92\xe1\xea\x59\x8e\x7c\x3d\x46\xa7\xb4\x99\xb4\x1b\xa8\x16\x5f\x5c\xd7\xdc\xb2\x81\x26\x28\x49\xec\x41\x3b\xc4\x7b\xb9\xa8\xd5\xc0\xed\xe1\xa5\x22\x79\xa6\xd4\x14\xfe\x2b\x50\xaa\xe9\x80\xfd\xd8\xdf\xa3\xba\x0d\x56\x36\xe4\xbe\xcc\xd4\x2e\xcb\x2c\xfb\xff\x52\xee\x4c\xee\xbc\x50\xe9\x18\xde\x4c\xc6\xaf\x90\x04\x86\x35\xdd\x83\x79\xdf\xd8\xd3\xec\x9a\x8a\xf7\xa6\x2a\x38\x3b\xce\xcf\x3e\xd7\xbe\x59\x59\xe8\x9c\xc6\x95\x25\x97\x8f\x37\xa7\x04\x9a\x76\x62\x97\x03\x59\xe5\xa0\x14\xde\x80\x3a\x2f\x86\x7e\x48\xbf\x2c\x7e\xd1\xd1\x7e\xca\x34\x9b\x6a\xde\x6d\xf0\xe5\xa7\x7b\x97\x75\x7b\xc8\xaf\x03\xfa\xf6\x83\xcf\x55\x66\x47\xa8\xad\xd0\xab\xaa\xbd\x92\xf6\x7a\xc8\x75\x94\x0f\x70\x8a\x9b\xcf\x43\x9e\x53\xec\x4f\x36\xa9\x32\x26\x94\x49\xaa\xae\x4d\x75\xb0\x83\x5a\x1a\x78\xa6\xff\xd0\x4e\x1f\x3a\x7c\x83\x4a\xd8\x9b\x5c\x1f\xba\xb7\x03\x73\xfe\xcd\x7f\xe3\xe2\xc0\x4d\xa8\x34\x04\xfd\x2a\xea\x3c\x87\xdd\xfb\x94\xaa\xab\xa4\xa6\xfb\x0c\x02\x5f\x53\x6c\x9b\xbd\x49\xd5\xb7\x4d\x2c\xd4\x41\x95\x9d\xf6\xb8\xf2\xea\x14\x01\xd7\x20\x11\xe6\x04\x49\xc8\xc5\x1e\x10\xc1\x1a\x77\x3a\x48\xd3\x3e\x92\xd7\xb1\x02\x06\x99\x0e\x83\x3f\x76\x2f\xd5\xa2\x5a\xf0\x67\xc6\xc2\xe0\x74\x44\x3e\x8a\xa7\x20\x8a\x0d\x57\xdb\x57\x3b\xd7\x09\x24\x3a\x36\x26\x93\xb8\x6a\xf1\xdd\xcb\x02\x12\x6f\x75\xce\x42\x5f\xe3\xed\xa2\xbe\x81\x4d\xb1\x75\x4f\x18\xc5\xb8\x28\x80\x93\x30\xd0\x32\x88\x62\x5b\x64\x81\x84\x41\x87\xba\xbe\xd3\xba\xce\xf6\x18\x9e\xa8\x0e\xa3\xb8\x72\x7a\x18\x35\xb1\x29\xdb\x80\x1d\x28\x27\xe2\x10\x2b\xd0\x6f\x8d\x0d\x7b\xcc\x42\x5f\x23\x4e\x5e\xc7\x9f\x95\xe0\x61\x70\x3c\xc6\x8f\x58\xc1\xaa\xc0\x7a\x5b\x96\x49\x7b\x17\x6e\xd6\x9b\xb8\x97\xe3\x6f\xff\x56\x96\xc1\xf4\xec\xae\xb2\xb5\xae\x9c\xa2\x37\x69\x9a\x9e\x52\xaf\x6a\xc2\x18\xa2\x1a\x51\x4e\x35\xc5\x8c\x3d\x8f\xbe\x8e\xf6\x45\x52\xdd\xaa\xd6\x7f\x28\x68\x2e\xed\xeb\x87\xfa\xbf\xe3\x11\x38\x29\xcb\xd1\x7f\x03\x00\x00\xff\xff\x5c\x92\x44\xe9\xaf\x18\x00\x00")

func templatesMonitorProcessorGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMonitorProcessorGoHtml,
		"templates/monitor/processor.go.html",
	)
}

func templatesMonitorProcessorGoHtml() (*asset, error) {
	bytes, err := templatesMonitorProcessorGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/monitor/processor.go.html", size: 6319, mode: os.FileMode(436), modTime: time.Unix(1493042119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesQueryIndexGoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\x08\xa3\x39\xb4\xb2\xd0\xe4\xd6\x50\xea\xa5\x39\x15\x28\x50\xf4\xd0\x63\x40\x89\x23\x89\x28\x4d\xaa\xe4\x30\x8e\x21\xe8\xbf\x2f\xf4\x19\x5b\x96\xed\x2c\x16\x0b\xec\x45\xc9\x68\x3e\x38\xef\xcd\xe3\x58\x4d\x23\xb1\x50\x06\x81\xe5\xd6\x10\x1a\x62\x6d\x7b\xc7\xa5\x7a\x83\x5c\x0b\xef\x13\xe6\xec\x9e\xa5\x77\x00\x00\xc7\x6f\xbb\x60\xa1\x0c\xba\xd1\xb7\xf4\x7f\x64\xad\x79\x73\xab\xa3\x9d\x8c\x7e\x7d\x5c\xc4\x00\xf0\xea\x31\xfd\x3b\xa0\x3b\xc0\x9f\x78\xf0\x3c\xae\x1e\x97\x11\x4d\xa3\x0a\xd8\xa2\x73\xd6\xb5\xed\x32\xfb\xe8\x0c\xa1\xd1\x11\xf4\xcf\x48\x0a\x53\xa2\x9b\x0c\xe5\x77\xca\x7b\x95\x69\x64\xe0\xac\xc6\x31\xf6\xac\x17\x00\x9e\x05\x22\x6b\x80\x0e\x35\x26\x6c\x30\xd8\x0c\x42\x5b\x8f\x0c\xa4\x20\x31\xd5\x9c\x2b\x71\x5f\x0b\x93\xfe\x44\x6a\x87\xfe\x99\xc7\xbd\xc5\xe3\xa1\xc0\xca\x31\x9e\x9c\x35\x65\xfa\xd2\x81\xba\xe7\xf1\x68\x42\xd3\x0c\x38\xb7\x2f\xeb\x68\x63\xa9\xde\xce\xe9\x41\x23\xcf\x42\x07\xd2\xf6\xc2\x19\x65\xca\x4f\xd3\x36\xc6\xff\xf0\xbc\xfd\x3b\xf4\x79\xca\xdc\xd8\xfc\xb7\x73\x37\xb1\xe7\x6d\x70\x39\xfa\x15\x3f\x2f\xac\xdb\x81\x35\x3e\x64\x3b\x45\x09\xdb\x2b\x23\xed\x7e\xab\x6d\x2e\x48\x59\x03\x09\x3c\x34\xcd\x36\x13\x1e\x5f\x6b\x41\x55\xdb\xc6\x4d\xb3\xf5\xa8\x31\x27\x94\xaf\x43\xdd\xb6\x8d\x1f\xe0\x67\xf0\x28\x5c\x5e\x6d\xdf\x84\x0e\xf8\x0c\x0e\x29\x38\x03\x85\xd0\x1e\x9f\x57\x78\x5e\x0e\x4f\x99\x3a\x50\x54\x3a\x1b\x6a\x38\xfa\x3f\xd2\xe5\x85\xe4\x2b\x05\xa2\x8c\xcc\x95\xac\x9b\x63\xce\xc8\x40\x46\x26\x92\x58\x88\xa0\x09\xa4\xb3\xb5\xb4\x7b\x13\x91\x2d\x4b\x3d\x09\x60\x30\x12\x36\x79\x59\xba\x46\x4d\x2f\x8b\x59\x3f\xc2\x61\x27\x95\x5b\xea\x38\xe9\x34\xe8\x29\x7d\xee\x63\x87\x26\xdc\x00\x08\xfd\xf0\x37\xf3\xe4\xe0\xb7\x04\x8e\xe7\xf8\x89\x64\xd7\xad\x1e\xd8\x28\x23\xf1\xfd\x17\xd8\x0c\x88\xfa\x3a\x97\xf5\x74\xd6\xbd\x56\x29\x17\x50\x39\x2c\x12\x76\xdc\x4f\xaf\xa4\xcd\xc4\x52\xc7\xdd\x6c\xf0\x58\xa4\x3c\xd6\xea\x33\x00\xd7\x55\x7f\xd2\x41\x1c\xf4\x15\x05\xad\x5d\xa6\x23\x77\xaf\x2a\x50\x32\x61\x83\xbc\xd9\xa8\x18\xc2\x77\x9a\xf5\xd2\xdd\xa1\xa8\xfb\x59\x71\x56\x33\x70\xf8\x7f\x50\x0e\xe5\xf7\x97\xed\x70\x69\x2f\xc9\x96\xa5\xff\xf4\x2d\xdf\x96\xd9\x15\x12\x2e\xb8\x78\xdc\x61\x3e\x7f\xdf\x34\xa8\x3d\xae\xed\x99\xeb\x7b\x7a\xb1\x95\xff\xb2\x30\x4a\x0c\x0a\x1b\x8c\xbc\x87\x3f\x94\x84\x83\x0d\x50\x58\x57\x22\x01\x59\x10\x44\x22\xaf\x80\x2a\xdc\xfd\x7e\xa1\xcb\x35\x79\x2c\x42\x17\xe6\xb0\x2e\xfb\x15\x76\x94\xc7\x2b\x17\xaf\x7f\x2b\xd4\xc2\xa0\x86\xfe\x39\x6f\x8b\xc1\xf2\x21\xcf\xd1\xfb\x2b\x5f\x12\x43\x5c\x85\x42\x76\x04\xac\x70\x5c\x3d\x9d\x86\x92\x22\x8d\xfd\x96\xf9\x0f\x0f\xdd\x35\xa9\x9e\xd2\x6b\xd8\xd6\x0f\xcc\xac\x3c\xac\x9d\x56\x3b\xec\x4a\x8f\xd8\x79\xdc\xd9\x5f\xc5\xdc\x07\xd7\xa3\x6b\xfc\x33\x79\xbe\x04\x00\x00\xff\xff\x05\xda\xbe\x9a\xaf\x09\x00\x00")

func templatesQueryIndexGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesQueryIndexGoHtml,
		"templates/query/index.go.html",
	)
}

func templatesQueryIndexGoHtml() (*asset, error) {
	bytes, err := templatesQueryIndexGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/query/index.go.html", size: 2479, mode: os.FileMode(436), modTime: time.Unix(1490953149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/common/base.go.html": templatesCommonBaseGoHtml,
	"templates/common/head.go.html": templatesCommonHeadGoHtml,
	"templates/common/menu.go.html": templatesCommonMenuGoHtml,
	"templates/monitor/index.go.html": templatesMonitorIndexGoHtml,
	"templates/monitor/menu.go.html": templatesMonitorMenuGoHtml,
	"templates/monitor/processor.go.html": templatesMonitorProcessorGoHtml,
	"templates/query/index.go.html": templatesQueryIndexGoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			"base.go.html": &bintree{templatesCommonBaseGoHtml, map[string]*bintree{}},
			"head.go.html": &bintree{templatesCommonHeadGoHtml, map[string]*bintree{}},
			"menu.go.html": &bintree{templatesCommonMenuGoHtml, map[string]*bintree{}},
		}},
		"monitor": &bintree{nil, map[string]*bintree{
			"index.go.html": &bintree{templatesMonitorIndexGoHtml, map[string]*bintree{}},
			"menu.go.html": &bintree{templatesMonitorMenuGoHtml, map[string]*bintree{}},
			"processor.go.html": &bintree{templatesMonitorProcessorGoHtml, map[string]*bintree{}},
		}},
		"query": &bintree{nil, map[string]*bintree{
			"index.go.html": &bintree{templatesQueryIndexGoHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

